name: 🤖 AI Box CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # TESTING & QUALITY ASSURANCE
  # ==========================================
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: 🎨 Code Formatting Check
      run: |
        black --check .
        flake8 .
        
    - name: 🔍 Type Checking
      run: mypy .
      
    - name: 🧪 Run Tests
      run: |
        pytest --cov=oryza_ai_box --cov-report=xml --cov-report=html
        
    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==========================================
  # SECURITY SCANNING
  # ==========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================
  # DOCKER BUILD - MULTI-PLATFORM
  # ==========================================
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        platform:
          - linux/amd64    # x86_64 (myai, Core i5)
          - linux/arm64    # ARM64 (Pi 5, Rock 5, Jetson)
        component:
          - api-gateway
          - model-server
          - data-manager
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile.${{ matrix.component }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ==========================================
  # AI MODEL VALIDATION
  # ==========================================
  model-validation:
    name: 🧠 AI Model Validation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 🔧 Install AI Dependencies
      run: |
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -e .[edge]
        
    - name: 🧪 Test Model Loading
      run: |
        python -c "
        from ultralytics import YOLO
        import torch
        print('✅ PyTorch CPU:', torch.__version__)
        print('✅ Ultralytics available')
        print('✅ Model validation passed')
        "
        
    - name: 📊 Model Performance Benchmark
      run: |
        python tools/benchmark_models.py --platform cpu --quick-test

  # ==========================================
  # EDGE DEVICE DEPLOYMENT
  # ==========================================
  deploy-edge:
    name: 🚀 Deploy to Edge Devices
    runs-on: ubuntu-latest
    needs: [build, model-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        device:
          - name: raspberry-pi-5
            host: ${{ secrets.PI5_HOST }}
            user: ${{ secrets.PI5_USER }}
            key: ${{ secrets.PI5_SSH_KEY }}
            platform: hailo
          - name: radxa-rock-5
            host: ${{ secrets.ROCK5_HOST }}
            user: ${{ secrets.ROCK5_USER }}
            key: ${{ secrets.ROCK5_SSH_KEY }}
            platform: npu
          - name: jetson-nano
            host: ${{ secrets.JETSON_HOST }}
            user: ${{ secrets.JETSON_USER }}
            key: ${{ secrets.JETSON_SSH_KEY }}
            platform: cuda
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔑 Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ matrix.device.key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ matrix.device.host }} >> ~/.ssh/known_hosts
        
    - name: 🚀 Deploy to ${{ matrix.device.name }}
      run: |
        ssh ${{ matrix.device.user }}@${{ matrix.device.host }} '
          cd /opt/oryza-ai-box
          docker-compose pull
          docker-compose up -d --remove-orphans
          docker system prune -f
        '
        
    - name: 🧪 Health Check
      run: |
        sleep 30
        curl -f http://${{ matrix.device.host }}:8000/health || exit 1
        echo "✅ ${{ matrix.device.name }} deployment successful"

  # ==========================================
  # NOTIFICATION & REPORTING
  # ==========================================
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy-edge]
    if: always()
    
    steps:
    - name: 📤 Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ai-box-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: 📧 Email Notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "🚨 AI Box CI/CD Pipeline Failed"
        to: ${{ secrets.EMAIL_TO }}
        from: "AI Box CI/CD <${{ secrets.EMAIL_USERNAME }}>"
        body: |
          AI Box CI/CD Pipeline failed for commit ${{ github.sha }}
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for details.

  # ==========================================
  # RELEASE AUTOMATION
  # ==========================================
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [build, model-validation]
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏷️ Generate Release Notes
      id: release_notes
      run: |
        echo "## 🚀 AI Box Release ${{ github.event.release.tag_name }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### 🆕 New Features" >> release_notes.md
        echo "- Multi-platform AI model deployment" >> release_notes.md
        echo "- Edge device optimization" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🐳 Docker Images" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}-api-gateway:${{ github.event.release.tag_name }}\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}-model-server:${{ github.event.release.tag_name }}\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}-data-manager:${{ github.event.release.tag_name }}\`" >> release_notes.md
        
    - name: 📤 Update Release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const release_notes = fs.readFileSync('release_notes.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ github.event.release.id }},
            body: release_notes
          });
