# ==========================================
# AI BOX - Docker Compose Configuration
# Development and Production Setup
# ==========================================

version: '3.8'

services:
  # ==========================================
  # API Gateway Service
  # ==========================================
  api-gateway:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.api-gateway
      target: production
    container_name: aibox-api-gateway
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://aibox:aibox123@postgres:5432/aibox
      - REDIS_URL=redis://redis:6379
      - MODEL_SERVER_URL=http://model-server:8001
      - DATA_MANAGER_URL=http://data-manager:8002
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
      - model-server
      - data-manager
    networks:
      - aibox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # Model Server Service
  # ==========================================
  model-server:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.model-server
      target: production
      args:
        - PLATFORM=${AI_PLATFORM:-cpu}
    container_name: aibox-model-server
    ports:
      - "8001:8001"
    environment:
      - DEVICE=${DEVICE:-auto}
      - MODEL_PATH=/app/models
      - BATCH_SIZE=${BATCH_SIZE:-4}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - OPTIMIZATION_LEVEL=${OPTIMIZATION_LEVEL:-medium}
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./cache:/app/cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - aibox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # ==========================================
  # Data Manager Service
  # ==========================================
  data-manager:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.data-manager
    container_name: aibox-data-manager
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://aibox:aibox123@postgres:5432/aibox
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongo:27017/aibox
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./data:/app/data
      - ./database:/app/database
      - ./backups:/app/backups
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - mongo
    networks:
      - aibox-network
    restart: unless-stopped

  # ==========================================
  # Database Services
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: aibox-postgres
    environment:
      - POSTGRES_DB=aibox
      - POSTGRES_USER=aibox
      - POSTGRES_PASSWORD=aibox123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/scripts/init_database.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - aibox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aibox"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: aibox-redis
    command: redis-server --appendonly yes --requirepass aibox123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aibox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  mongo:
    image: mongo:6
    container_name: aibox-mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=aibox
      - MONGO_INITDB_ROOT_PASSWORD=aibox123
      - MONGO_INITDB_DATABASE=aibox
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - aibox-network
    restart: unless-stopped

  # ==========================================
  # Monitoring Services
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: aibox-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - aibox-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: aibox-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=aibox123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - aibox-network
    restart: unless-stopped

  # ==========================================
  # Development Tools (dev profile only)
  # ==========================================
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: aibox-jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=aibox123
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./ai_models:/home/jovyan/work/models
      - ./data:/home/jovyan/work/data
    ports:
      - "8888:8888"
    networks:
      - aibox-network
    profiles:
      - dev
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aibox-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@aibox.local
      - PGADMIN_DEFAULT_PASSWORD=aibox123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - aibox-network
    profiles:
      - dev
    restart: unless-stopped

# ==========================================
# Networks
# ==========================================
networks:
  aibox-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
